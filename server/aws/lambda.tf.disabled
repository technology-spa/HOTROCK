# only enable these lambda resources after configuring and testing fluentd

resource "aws_security_group" "lambda_to_k8s_http" {
  name_prefix = "${local.cluster_name}-lambda_to_k8s_http"
  description = "Lambda function pushing CloudWatch logs to Fluentd"
  vpc_id      = "${module.vpc.vpc_id}"
  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = [
      "10.0.16.0/22",
      "10.0.20.0/22"
    ]
  }
  egress {
    from_port = 80
    to_port   = 80
    protocol  = "tcp"
    cidr_blocks = [
      "10.0.0.0/22",
      "10.0.4.0/22",
      "10.0.8.0/22",
      "10.0.12.0/22"
    ]
  }
  tags = "${local.tags}"
}

resource "aws_cloudwatch_log_group" "lambda_fluentd" {
  name              = "${local.cluster_name}-lambda-flowlogs"
  retention_in_days = 1
  tags              = "${local.tags}"
}

// resource "aws_cloudwatch_log_stream" "lambda_fluentd" {
//   name           = "${local.cluster_name}-lambda-flowlogs"
//   log_group_name = "${aws_cloudwatch_log_group.lambda_fluentd.name}"
// }

resource "aws_lambda_permission" "lambda_fluentd" {
  statement_id  = "AllowExecutionFromCloudWatch"
  action        = "lambda:InvokeFunction"
  function_name = "${module.lambda.function_arn}"
  principal     = "logs.${var.region}.amazonaws.com"
  source_arn    = "${aws_cloudwatch_log_group.lambda_fluentd.arn}"
}

resource "aws_cloudwatch_log_subscription_filter" "lambda_fluentd" {
  depends_on      = ["aws_lambda_permission.lambda_fluentd"]
  name            = "${local.cluster_name}-lambda-flowlogs"
  log_group_name  = "${aws_cloudwatch_log_group.lambda_fluentd.name}"
  filter_pattern  = "[version, account, eni, source, destination, srcport, destport, protocol, packets, bytes, windowstart, windowend, action, flowlogstatus]"
  destination_arn = "${module.lambda.function_arn}"
  distribution    = "Random"
}

resource "aws_flow_log" "lambda" {
  iam_role_arn    = "${aws_iam_role.vpc_flowlogs.arn}"
  log_destination = "${aws_cloudwatch_log_group.lambda_fluentd.arn}"
  traffic_type    = "ALL"
  vpc_id          = "${module.vpc.vpc_id}"
}

resource "aws_iam_role" "vpc_flowlogs" {
  name = "${local.cluster_name}-lambda-flowlogs"
  assume_role_policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "",
      "Effect": "Allow",
      "Principal": {
        "Service": [
          "vpc-flow-logs.amazonaws.com"
        ]
      },
      "Action": "sts:AssumeRole"
    }
  ]
}
EOF
}

resource "aws_iam_role_policy" "vpc_flowlogs" {
  name = "${local.cluster_name}-lambda-flowlogs"
  role = "${aws_iam_role.vpc_flowlogs.id}"
  policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents",
        "logs:DescribeLogGroups",
        "logs:DescribeLogStreams"
      ],
      "Effect": "Allow",
      "Resource": "*"
    }
  ]
}
EOF
}

# https://github.com/claranet/terraform-aws-lambda
module "lambda" {
  source                         = "github.com/claranet/terraform-aws-lambda?ref=v0.x.x"
  version                        = "= v0.12.0"
  function_name                  = "${local.cluster_name}-lambda"
  description                    = "Push VPC flow logs to Fluentd"
  handler                        = "vpc-flow-logs.handler"
  runtime                        = "python3.6"
  timeout                        = "120"
  enable_cloudwatch_logs         = "true"
  # set to "0" to disable lambda
  reserved_concurrent_executions = "5"
  source_path                    = "${path.cwd}/lambda/vpc-flow-logs.py"
  attach_dead_letter_config      = false
  environment {
    variables {
      SCHEMA = "http://"
      HOST   = "hotrock-fd-int.domain.tld"
      PORT   = "80"
      # fluentd's tag
      TAG    = "hotrock.aws"
    }
  }
  attach_vpc_config = true
  vpc_config {
    subnet_ids         = ["${module.vpc.private_subnets[4]}", "${module.vpc.private_subnets[5]}"]
    security_group_ids = ["${aws_security_group.lambda_to_k8s_http.id}"]
  }
  tags = "${local.tags}"
}
