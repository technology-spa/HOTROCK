## This document shows an example Fluentd Configuration for tagging and routing Beat logs 
### This would be included in the master fluent.conf using 
## >  include @beat-windows.conf
## Tags used for sorting are added at beat level 

<match demo>
  @type rewrite_tag_filter
  <rule>
    key     tags
    pattern /windows.auditbeat/
    tag     beat-windows.audit
  </rule>
  <rule>
    key     tags
    pattern /winlogbeat/
    tag     beat-windows.winlog
  </rule>
  <rule>
    key     tags
    pattern /windows.metric/
    tag     beat-windows.metric
  </rule>
  <rule>
    key     tags
    pattern /windows.file/
    tag     beat-windows.file
  </rule>
</match>

#Reading the Filebeat tag and changing the Fluentd tag based on it
# The match patterns later on will match these
# Limiting use of wildcards in match statements is a good practice
# If you use a tag in more than one tag file, it will cause a loop and Fluentd will not properly route the data

<match beat-windows.file>
  @type rewrite_tag_filter
  <rule>
	key tags
    pattern /.*w3scv.*/
	tag ${tag}.w3scv
  </rule>
   <rule>
	key tags
    pattern /.*httperr.*/
	tag ${tag}.httperr
  </rule>
 <rule>
	key tags
    pattern /.*mssql.error.*/
	tag ${tag}.mssql.error
  </rule>
   <rule>
	key tags
    pattern /.*mssql.agent.*/
	tag ${tag}.mssql.agent
  </rule>
</match>

#Filtering out all log lines that do not start with a timestamp
<filter beat-windows.file.w3scv>
	@type grep
	<regexp> 
		key message
		pattern /^[\d]{4}-[\d]{2}-[\d]{2} [\d]{2}:[\d]{2}:[\d]{2}/
	</regexp>
</filter> 

<filter beat-windows.file.mssql**>
		@type grep
		<regexp> 
			key message
			pattern /^[\d]{4}-[\d]{2}-[\d]{2} [\d]{2}:[\d]{2}:[\d]{2}.[\d]{2}/
		</regexp>
	</filter> 
		
#Using the information gained from IIS-Log-Locator.ps1, we were able to create parsing rules for each type that existed
#A feature that autodetects column names is on the roadmap to reduce regex bloat like this 		
<filter beat-windows.file.w3scv>
	@type parser
	key_name message
	reserve_data true
	remove_key_name_field true
	<parse>
		@type multi_format
		<pattern>
			#This first  regexp is the default IIS format
			format regexp 
			expression /(?<time>[\d]{4}-[\d]{2}-[\d]{2} [\d]{2}:[\d]{2}:[\d]{2}) (?<c-ip>\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b) (?<username>\S+) (?<s-ip>\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b)  (?<method>\w+|-) (?<uri-stem>\S*) (?<uri-query>\S*) (?<time-taken>\d+|-) (?<status>\d+|-) (?<win32-status>\d+|-) (?<s-port>\d+) (?<bytes-sent>\d+|-) (?<bytes-received>\d+|-) (?<time-taken>\d+|-) (?<user-agent>[\S]*) (?<substatus>\d+|-) (?<referrer>[\S]*)/
			time_format %Y-%m-%d %H:%M:%S
		</pattern>
		<pattern>
			format regexp
			expression /(?<time>[\d]{4}-[\d]{2}-[\d]{2} [\d]{2}:[\d]{2}:[\d]{2}) (?<sitename>\S+) (?<hostname>\S+) (?<src_ip>\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b) (?<method>\w+) (?<uri-stem>\S*) (?<uri-query>\S*) (?<port>\d+) (?<username>\S+) (?<client_ip>\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b) (?<protocol_version>[\S]*) (?<user_agent>[\S]*) (?<cookie>[\S]*) (?<referrer>[\S]*) (?<host>[\S]*) (?<status>\d+|-) (?<substatus>\d+|-) (?<win32_status>\d+|-) (?<bytes_sent>\d+|-) (?<bytes_received>\d+|-) (?<time_taken>\d+|-) (?<x Forwarded For>\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b|-)/
			time_format %Y-%m-%d %H:%M:%S
		</pattern>
	 </parse>
</filter>

#Our HTTPERR logs only have a single format 
<filter beat-windows.file.httperr>
	@type parser
	key_name message
	reserve_data true
	remove_key_name_field true
	<parse>
        @type regexp 
		expression /(?<time>[\d]{4}-[\d]{2}-[\d]{2} [\d]{2}:[\d]{2}:[\d]{2}) (?<client_ip>\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b) (?<client_port>\d+|-) (?<src_ip>\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b) (?<src_port>\d+|-) (?<protocol_version>[\S]*) (?<method>[\S]*) (?<uri>[\S]*) (?<status>\d+|-) (?<side-id>[\S]*) (?<reason>[\S_]*) (?<queuename>[\S]*)/
        time_format %Y-%m-%d %H:%M:%S
    </parse>
</filter>

#These parsings don't break down the message section of these logs 
<filter beat-windows.file.mssql.error>
	@type parser
	key_name message
	reserve_data true
	remove_key_name_field true
	<parse>
        @type regexp 
		expression /(?<time>[\d]{4}-[\d]{2}-[\d]{2} [\d]{2}:[\d]{2}:[\d]{2}.[\d]{2}) (?<process>[\S]*) (?<message>.*)/
        time_format %Y-%m-%d %H:%M:%S.%L
    </parse>
</filter>

 
<filter beat-windows.file.mssql.agent>
	@type parser
	key_name message
	reserve_data true
	remove_key_name_field true
	<parse>
        @type regexp 
		expression /(?<time>[\d]{4}-[\d]{2}-[\d]{2} [\d]{2}:[\d]{2}:[\d]{2}.[\d]{2}) - (?<Message Type>[\S]) (?<message>.*)/
        time_format %Y-%m-%d %H:%M:%S.%L
    </parse>
</filter>

## Using tags we set
<match beat-windows.audit>
  @type elasticsearch
  @log_level info
  @id demo.beat-windows.audit
  host hotrock-master
  port 9200
  reconnect_on_error true
  reload_on_failure true
  reload_connections false
  log_es_400_reason true
  request_timeout 60s
  logstash_format true
  logstash_prefix "demo.beat-windows.audit"
  type_name _doc
  user svc_fluentd
  password "#{ENV['FLUENTD_CHIPPER_ES_PASSWORD']}"
  scheme https
  ssl_version TLSv1_2
  ssl_verify false
  # https://docs.fluentd.org/v1.0/articles/buffer-section
  <buffer>
    @type memory
    # max retry time default to exponential, but with this max cap here
    retry_max_interval 600s
    overflow_action block
    flush_thread_count 2
    flush_at_shutdown true
    flush_interval 5s
    chunk_limit_size 12m
    queue_limit_length 96
    queued_chunks_limit_size 32
  </buffer>
</match>

# Greedy ending is used since we added additional tags when parsing 
<match demo.beat-windows.file*>
  @type elasticsearch
  @log_level info
  @id beat-windows.file
  host hotrock-master
  port 9200
  reconnect_on_error true
  reload_on_failure true
  reload_connections false
  log_es_400_reason true
  request_timeout 60s
  logstash_format true
  logstash_prefix "beat-windows.file"
  type_name _doc
  user svc_fluentd
  password "#{ENV['FLUENTD_CHIPPER_ES_PASSWORD']}"
  scheme https
  ssl_version TLSv1_2
  ssl_verify false
  # https://docs.fluentd.org/v1.0/articles/buffer-section
  <buffer>
    @type memory
    # max retry time default to exponential, but with this max cap here
    retry_max_interval 600s
    overflow_action block
    flush_thread_count 2
    flush_at_shutdown true
    flush_interval 5s
    chunk_limit_size 12m
    queue_limit_length 96
    queued_chunks_limit_size 32
  </buffer>
</match>

<match demo.beat-windows.winlog>
  @type elasticsearch
  @log_level info
  @id beat-windows.winlog
  host hotrock-master
  port 9200
  reconnect_on_error true
  reload_on_failure true
  reload_connections false
  log_es_400_reason true
  request_timeout 60s
  logstash_format true
  logstash_prefix "beat-windows.winlog"
  type_name _doc
  user svc_fluentd
  password "#{ENV['FLUENTD_CHIPPER_ES_PASSWORD']}"
  scheme https
  ssl_version TLSv1_2
  ssl_verify false
  # https://docs.fluentd.org/v1.0/articles/buffer-section
  <buffer>
    @type memory
    # max retry time default to exponential, but with this max cap here
    retry_max_interval 600s
    overflow_action block
    flush_thread_count 2
    flush_at_shutdown true
    flush_interval 5s
    chunk_limit_size 12m
    queue_limit_length 96
    queued_chunks_limit_size 32
  </buffer>
</match>

